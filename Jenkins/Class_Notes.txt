DCP - Sep. Weekend - 14th Oct. 2023

Docker Module -- 

Kubernetes -- 

Docker Compose 

GIT - Completed 
	Git Workflow 
		init 
		add
		commit 
		clone
		push
		pull
		fetch 
		diff
		show
		commit with opts 
		reset
		revert 
		
	Git Branching Strategies
		branch
		merge 
		merge conflict 
		with with multiple branches
			merge rebase squash
			
		stash 
		
	Remote Repo.
		github 
	
		remote 

	

Jenkins  --> Not Start!




CI using Jenkins
 
CM using Ansible --


DevOps ::::

	DevOps is a Software Development Strategies which help to promote collaborate between the teams like Development and Operations team,
	to achieve Continous Development, Continous Integration, Continous Testing, Continous Delivery, Continous Deployment, Continous Monitoring in an automated fashion.
	
	Teams: 
	
		DevOps Team 					==> DevOps Asso., Engg., Lead, Architect, Consultant,
			Infra-Provision Team 
			Appln. Development Team 
			Testing Team 
			Release Mgmt Team
			Production Support 
			Production Monitoring 
			Security Team 
			
	
		Infra-Structure --> Provision Team 
			IAC Tools :
				Terraform	==> Used for infra-structure povisioning/Creation 
				Ansible 	==> Configuration Management Tool - Used for Server configurations
	
	DevOps Stages: 
	
	
	
	Continous Development
		IDEs - Eclipse, VSC, GIT 
		
			Coding --
			
			Application Build 	--> 	Process of Compiling the Src_Code and Create Artifacts(Binaries - *.war/*.jar/.dll/*.exec)
			Unit Testing 
			Promote for further testing QA/UAT
			Email Notifications 
			
			Released to Production 
			Monitoring
			
		Using DevOps Approach ::::
				Coding.
				Commit the changes to src_code Repository.
				
			DevOps Automation :
				Application Build 	--> 	Process of Compiling the Src_Code and Create Artifacts(Binaries - *.war/*.jar/.dll/*.exec)
				Unit Testing 
				Promote for further testing QA/UAT
				Email Notifications 
				
				Released to Production 
				Monitoring

			Tools : IDEs - Eclipse, VSC, GIT 
		
		
			
	Continous Integration,
				Tools:	Jenkins, Ansible, Docker, Kubernetes

	
	Continous Testing, 
				Tools: Junit, TestNG, Selenium, Jenkins 
			
	
	Continous Delivery/Deployment :
				Both Continous Delivery/Deployment used to Release the products to Production
					
					Continous Delivery 		==> Requires a Manual Approval for Production Release 
					Continous Deployment 	==> Is Completely Automated - Doesn't requires any Manual Intervension/Approval for Production Release

		Deployment ::::
		
				==> It is a process of copying the artifacts from one environment to another/target environment

			Banking Domain/ INS/ :::
			
				Deployment Window ::: 4Hrs to 6Hrs. (Non-Business Hrs.) Downtime.
					Continous Delivery ==>  Requires Manual approval from all their stakeholders
							Due to some reason, this failed!
									Fix!/Revert!
						
			
			facebook/google/amazon.com :::
				Continous Deployment 	==> Is Completely Automated - Doesn't requires any Manual Intervension/Approval for Prod Release. 
				
				Tools:	Jenkins, Ansible, Docker, Kubernetes
				
						Monolith Applications :
							Tightly coupled -- with lot of dependencies
						Micro-Service Based Application 
			
				E_Commerce portal ::
					www.amazon.com 

			Monolith Applications :
				Tightly coupled -- with lot of dependencies
				Here the deployment happens at the application level.
							
				sign_up			developer1 - code, test ==> Cannot deploy to prod independently.
				sign_in
				Search
				Add to cart
				payment
				confirm order 
				track


			Micro-Service Based Application	
				Loosely coupled -- with out any dependencies
				Here the modules are considered as a service (Micro-Service)
				Here the deployment happens at the sevice level.
							
				sign_up			developer1 - Independently code, test & deploy to prod without impacting others service.
				sign_in
				Search
				Add to cart
				payment
				confirm order 
				track


			
	Continous Monitoring
				Tools:	Jenkins, Prometheus/Grafana
					Infra-Structure Monitoring  - Prometheus/Grafana/datadog/dynatrace
					Application Monitoring 		- AppDynamics
				
				
	Environments :::
	
		Non-Production Environment														Production Environment
		
			Dev Environment
			Build Environment
			Testing Environment
				QA 
				UAT 									=====>								Prod Environment
				
	
	DevOps is all about :::
			People 
			Process 
			Tools 
			
		Telecomm-Domain 
			SP1 ==> Introduce a new offers --> It should release to customers as early as possible 
			SP2 ==> 
			
			
	Tools :::
				Open-Source DevOps Tools 	
				
					git, jenkin, docker, kubernetes, prometheus/ Grafana, Ansible, terraform 
				
				Managed Services - AWS / Azure / GCP 
				
				
	Next Jenkins ::::

			
		Lab ::: 
		
			- AWS Free Tier 
				Launch VMs
			Connect to VMs 
				- EC2 Instance Connect 
				- SSH Agent - To access Remote machines 
					Putty 
					MobaXterm			https://mobaxterm.mobatek.net/download.html
				- Terminals
			- Create GITHub Account 
			- Create dockerhub Account
			- Install Visual Studio Code 
			
			
	
		Jenkins - Is a build Orchestration Tool :
			
			- Master Slave Architecture :::
			
			Jenkins :
			
			Developers' Perspective ::
			
				Developers are just the Jenkins consumers.
			
			
			DevOps Perspective ::
			
				Administrator - Jenkins
					- Installation and Configuration of Jenkins
					- Plugins Management
					- User Management 
					- Tools Management
					- Credential Management 
					- Security Management 
					- Manangement of Jenkins Master and Slave Nodes
					- Onboarding Applications to DevOps using Jenkins 
					- Create/automate end-to-end CI/CD Pipeline/Project
					- Backup and Recovery
					- Troubleshooting the issues
					
		Installation and Configuration of Jenkins :::
					https://www.jenkins.io/doc/book/installing/
					
					
			1. Launch AWS Instance - Ubuntu VM
			2. 1 vm -- 750 hrs/month 
				10 vms -- 75hrs 
				
				
		Linux Package Managers :::	install/uninstall/update the package
		
			- Ubuntu 		apt or apt-get 
			- Centos/RHEL	yum
			- Fedora 		dnf 
			
		As a root user only we can run the package manager!
		
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# JENKINS INSTALLATION Steps ::

1. Launch AWS Instance - Ubuntu VM
2. Add port 8080 in security Group  - default port for jenkins

3. sudo -i 
4. apt update -y 

5. INSTALL JDK Package Installation (JAVA) ::
sudo apt install fontconfig openjdk-11-jre -y
java -version
		
6 Jenkins Installation in Ubuntu ::
		
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

7. sudo apt-get update -y
8. sudo apt-get install jenkins -y

jenkins --version  	-------> check jenkins version
systemctl status jenkins ------> check if your jenkins is running
systemctl stop jenkins 
systemctl start jenkins 
systemctl restart jenkins 
systemctl enable jenkins 

# After Jenkins is installed,
	To see the path jenkins is installed, and files, and folders
	/var/lib/jenkins/


# Jenkins Post installation Activities (done using web browser) :::	
Access the jenkins page copying the AWS public IP address and using port 8080
# copy the password from your jenkins terminals and run unlock the jenkins

# default username : admin / pasword : admin
	Unlocked Jenkins 
	Installed Plugins -----> using suggested pluggings 
	Created Admin user 
		
Summary :::

	What is Jenkins / roles & Responsibilities 
	Install Jenkins 
					
				
			
###################
15th Oct. 2023			
###################

				Administrator - Jenkins
					- Installation and Configuration of Jenkins
					- Plugins Management
					- User Management 
					- Tools Management
					- Credential Management 
					- Security Management 
					- Manangement of Jenkins Master and Slave Nodes
					- Onboarding Applications to DevOps using Jenkins 
					- Create/automate end-to-end CI/CD Pipeline/Project
					- Backup and Recovery
					- Troubleshooting the issues		
			
			
	Environments :::
	
		Non-Production Environment														Production Environment
		
			Dev Environment			VM
			Build Environment       VM
			Testing Environment     VM 
				QA 	
				UAT 									=====>								Prod Environment VM
				
				
		
		Jenkins_server (Non-Production) (VM)													Jenkins_server (Non-Production)
		
		Jenkins ==> Build Orchestration Tool.
			
			DevOps Automation :
				Application Build 	--> 	Process of Compiling the Src_Code and Create Artifacts(Binaries - *.war/*.jar/.dll/*.exec)
				Unit Testing 
				Promote for further testing QA/UAT
				Email Notifications 
				
				Released to Production 
				Monitoring
				
				
			Build --> Maven/ANT/Gradle ==> 
			
		
		Authentication ::::
		
			Types of Authentications! 
			
				password based Auth 
				Key based Auth 
				Token based Auth 
				Certs
				Passwordless Auth 
		
WHEN WE TALK ABOUT JENKIN JOBS, PIPELINES OR PROJECTS
		Jenkins Project / Jobs / Pipeline ::: (TWO TYPES)
		
		1.)	-- Free Style Projects ----> for testing purposes
			
		2.)	-- Pipeline Projects	-	created using Groovy Scripts!
			
			HANDLING JENKINS VARIABLES ::::			"${var_name}"		"${varname}"
			
				Environment Variables 
				
				User Defined Variables
				
			
	2.) PIPELINE PROJECTS		-	created using Groovy Scripts!	
					
					- Scripted Pipeline 	-->
					- Declarative Pipeline  --> simplifiedversion of scripted pipelines

			Scripting Languages you should learn 		:: Shell/Groovy/YAML/Python.
			Programming Language	::

#CREATING A PIPELINE PROJECT USING DECLARATIVE PIPELINE			
			
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Build') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy to QA Envi.') {
            steps {
                echo 'Hello World'
            }
        }
    }
}	
		
		
			PIPELINE PROJECTS STAGES/STEPS BASED ON REAL TIME ENVT ::: USING MAVEN AS THE BUILD TOOL
			
				Stages (tasks or activities given to perform) :::
					Clone the Src_Code Repos in the build server
					Build::::: Using some build tools (Maven)
					Create Artifacts
					Unit testing
					Promote for further testing
					Email notifications

NOTE: each stage name should be unique when creating stages for your pipeline project				
				
				
		Build Tools :::
		Slave Node Configuration....
		
			Application :: 	Java Web Application Development
							Maven / Gradle 
							
				Maven ==> Build Tool
					pom.xml ==> It is used to define the dependencies and plugins.
					#MAVEN GOALS :::
						clean -------> used to clean up the exiting artifacts		
						test
						build 
						package  ---> used to perfom the test, create the artifacts and perfrom unit testing.
				
				Application Team :
				
						Create the Src_Code & Commit the changes in Src_Code Repository
					
			DevOps Automation TASKS :
				Application Build 	--> 	Process of Compiling the Src_Code and Create Artifacts(Binaries - *.war/*.jar/.dll/*.exec)
				Unit Testing 
				Promote for further testing QA/UAT
				Email Notifications 	
				
			Identify the src_code repo url.
			
			
			Jenkins Slave Node Configuration :::
			
			Jenkins_Master :::(VM)	Is to Create/Manage Jenkins Jobs and Schedule the Jobs.
					Jenkins_SlaveNode1 ==> Build Application - Java 
					Jenkins_SlaveNode1.2 ==> Build Application - Java 
					Jenkins_SlaveNode2 ==> Build Application - .Net 
					Jenkins_SlaveNode3 ==> Build Application - Python 
					Jenkins_SlaveNode4 ==> Build Application - NodeJS
					Jenkins_SlaveNode5 ==> Build Application - Angular
					
			
			
		- Handling Remote Servers!
		
		
			Jenkins_Master :::(VM)	Is to Create/Manage Jenkins Jobs and Schedule the Jobs.

					JENKINS SLAVENODE CONFIGURATION ==> Build Application - Java 
								1. Launch VM 
								2. Install the build tools
										GIT,JDK,MAVEN
								3. Create user in Slave Node 
								4. Authentication : SSH Connection
										SSH-Key Based Authentication.
								5. Go back to jenkins master
									Add nodes




pipeline {
    agent { label 'slave1' }

    tools {
        maven "maven-3.6.3"
    }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM-Checkout'
                git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Maven Build') {
            steps {
                echo 'Perform Maven Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to QA Envi.') {
            steps {
                echo 'Hello World'
            }
        }
    }
}
_______________________________________________________
Configure Slave Node1 for Java Maven App. : ACTUAL BUILD SHOULD HAPPEN IN THE SLAVE NODE AND NOT MASTER NODE
---------------------------------------------------
Install Java ::

sudo -i


sudo apt update -y  ------------------------> first update the default packages
sudo apt install openjdk-11-jre -y
java -version

Install GIT : if its not installed in the system

sudo apt install git -y

Install Maven - Build Tool : (use official pages when installing)
https://maven.apache.org/install.html 

sudo apt install maven -y 


Create User in Jenkins Slave Machine & Create SSH Keys (this is to integrate jenkins slavenode to masters node)

	SSH Keys --> is composed of public and private keys 


#Add User : 

#useradd -m -d /home/devopsadmin devopsadmin
#useradd devopsadmin

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin (create user with home directory)

su - devopsadmin

#ssh-keygen --------> create some ssh-keygen for the user to enableauthentication

#for Ubuntu system ::
ssh-keygen -t rsa -b 4096 -m PEM

ls -a -------------> view the file created
ls ~/.ssh 

#You should see following two files: in .ssh
	1. id_rsa ------> private key
	2. id_rsa.pub ---> public key

#CREATE ADDITIONAL AUTHORIZE KEY WITH THE COMMAND BELOW, THE PUBLIC KEY IS NOT ENOUGH
	command: cat id_rsa.pub > authorized_keys

#LIMIT ACCESS/AUTHORIZATION of the authorized key TO ONLY DEVOPS ADMIN
	chown -R devopsadmin /home/devopsadmin/.ssh
	chmod 600 /home/devopsadmin/.ssh/authorized_keys
	chmod 700 /home/devopsadmin/.ssh


GO TO Jenkins Master - Add Node Configuration
		
		Goto Manage Jenkins - Add New Node Configuration
		Description: short description about the project
		REMOTE ROOT DIRECTORY = the home directory of the user account you created
		Labels : give a name to use identify the project (eg, slave1)
		Launch Method = ssh
		Host = private IP add of your slavenode AWS VM
		Credentials ---> click add
				kind ----> ssh username with private key
				ID & description -----> can use same details
				username ------> devopsadmin
				private key ---> use the private key of id_rsa
		use the private key of id_rsa
		host key verification strategy ---> manually trusted key verification
				tick require manual verification

	#save AND launch
	#click on the slavenode creadted
	#click TRUST SSH KEY HOST and AUTHORIZE

After Jenkins Slave node is running, you can rerout all projects running on masters to slavenodes
	TO REROUTE PROJECTS RUNNING ON MASTERS NODE TO SLAVE NOEDS
			1. Go to the project pipeline, click configure
			2. go to the script
			3. change label to the jenkins slave label name
			4. Apply changes and build now to run on jenkins slavenodes

NOTE: Befoe you click BUILD formaven stage, you have to configure maven tools. 
	GO TO TOOLS --> ADD MAVEN
	MAVEN NAME = Maven version (mvn --version)
	MAVEN_HOME = Maven home directory

STEPS TO RUN A PIPELINE
	1. create and launch your pipeline
	2. clone the repository
	3. perfoem maven clean and package (to clean, build and perform unit testing)
		command: sh 'mvn clean package'
NOTE: Before you trigger maven build, you have to configure maven tools in your dashboard, in other for the slave node
	to interact with the master node
			---manage jenkins
			---tools
			---add maven
			---untick install automatically
			---copy mvn home directory from your terminal and add
	4. Then you can now trigger build after maven installation
			
			
Summary ::

		Config Jenkins_Master & Slave 
		Create Pipeline -- 
			SCM_Checkout 
			Build 
			
Next ::
		Automate the CICD pipeline
		Deploy to Tomcat Server 
		Email Notification....
		Best Practise.
			
			
			
			
###################
21th Oct. 2023			
###################			
			
		Automate the CICD pipeline
		Deploy to Tomcat Server		
		Email Notification....
		Best Practise.
		
		
			- Launch VM - Application Execution
			
			
			
	Environments :::
	
		Non-Production Environment														Production Environment
		
			Dev Environment			VM
			Build Environment       VM
			Testing Environment     VM 
				QA 		--> Quality Assurance Testing
				UAT 	--> User Acceptance Testing			=====>								Prod Environment VM			
				


		Launch an Instance :
		
				Install Application Server ::: (tomcat)
					
				In Jenkins Master ::	Publish over SSH Plugins 
				
					Jenkins_Master				==> Create & Manage Jenkins Jobs/Schedule the job to slave ndoes.
						Jenkins_SlaveNode1		==> Perform the build 
					QA_Server 					==> Run the application using tomcat 
					UAT_Server 
					Kubernetes
				

				What is Deployment????
				
				--> It is process of copying the artifacts/binaries to the target environment.
				
				
				Source Dir. 																		Destination Dir.
				
					target/mvn-hello-world.war					====>									/opt/tomcat/webapps/mvn-hello-world.war	


				From Jenkins Dashboard Install Plugin :	Publish over SSH Plugins  
				
				Install with Restart Option - 
				
				go to system config. and Add Remote Server.
				
				cp *.war /opt/tomcat1/webapp /opt/tomcat1/webapp
				
pipeline {
    agent { label 'slave1' }

    tools {
        maven "maven-3.6.3"
    }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM-Checkout'
                git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Maven Build') {
            steps {
                echo 'Perform Maven Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to QA Envi.') {
            steps {
				script {
					sshPublisher(publishers: [sshPublisherDesc(configName: 'QA_Server-WE', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}
            }
        }
    }
}				



Build Triggers :::


		- Build Periodic 		https://crontab.guru/
		
			It is used to schedule the job based on CronTab.

					
					Eg.: 
						To run the Jobs for every 1 Hour.
				
				UseCase ::
							Clean_up activities on the Slave nodes.
								Job ==> Scheduled to run - once in 3 days.
								
							Environments :::			8AM - 10PM
							
								Non-Production Environment									Production Environment
								
									Dev Environment			VM
									Build Environment       VM
									Testing Environment     VM 
										QA 		--> Quality Assurance Testing
										UAT 	--> User Acceptance Testing			=====>		Prod Environment VM			
																	


######################Install TOMCAT Application Server on Ubuntu :::


https://tomcat.apache.org/download-80.cgi

Enable Port 8080 :

sudo -i
sudo apt update -y
sudo apt install openjdk-11-jre -y 
java -version

#edit /etc/profile & add JAVA_HOME

#/usr/lib/jvm/java-11-openjdk-amd64/

vi /etc/profile

/usr/lib/jvm/java-11-openjdk-amd64

export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

source /etc/profile

Install Tomcat ::

cd /opt
wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.95/bin/apache-tomcat-8.5.95.tar.gz

https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.95/bin/apache-tomcat-8.5.95.tar.gz

tar -xvzf /opt/apache-tomcat-8.5.95.tar.gz

apache-tomcat-8.5.95.tar.gz

mv apache-tomcat-8.5.95 tomcat

#Start Tomcat Server:
#Goto:

cd /opt/tomcat/bin
./startup.sh


###########################################

#Add User : 

#useradd -m -d /home/devopsadmin devopsadmin
#useradd devopsadmin

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 2048 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#make devopsadmin user as a owner to tomcat dir :

chown -R devopsadmin /opt/tomcat

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Deployment --> Copy the artifacts from source to target server 

	--> Jenkins_Slave 											--->					Tomcat_Server 
			target/mvn-hello-world.war							====>					/opt/tomcat/webapps/	
			
			
Install publish over ssh in Jenkins Master 		& restart jenkins 	

					
		
		- Github webhook :::
		
			Both Github-webhook and Poll SCM are based on the source code changes.
			
				Github-webhook -- will trigger the job as soon as we commit the changes in Src_Code Repository.
				
				- Create web hook configurations in the Src_Code Repository
					- Config the Jenkins payload url in src_code Repository
					
						Eg.: 
								http://3.108.59.111:8080/github-webhook/
								
								http://13.232.187.76:8080/github-webhook/
								
				- Enable Github trigger option in Jenkins Job.
				- Ensure that GIT is installed in Jenkins Master Node.
						sudo apt install git -y
		
		
		- Poll SCM	:::
		
				Poll SCM - will be scheduled to run the job only if there is any commit/push in Src_Code Repository.
				
				Using CrodTab - Schedule the Jobs 
				
					Eg.: 
						To run the Jobs for every 1 Hour.
						
					Use Case :::
								Test Cycles :::
												8AM 
												12 Noon 
												3 PM
				


Notifications ::

		Email Notifications :::::


Email Notification Plugins :::

SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Account Settings

select Security 

MFA --> mobile#
App Password = 16 bytes of code.
What ? window
Which Appln - email
		

Next :::
IAC Tools :::

	Ansible ::::
	Terraform :::


Docker/Kubernetes 



######################Install TOMCAT Application Server on Ubuntu :::


https://tomcat.apache.org/download-80.cgi

Enable Port 8080 :

sudo -i
sudo apt update -y
sudo apt install openjdk-11-jre -y 
java -version

#edit /etc/profile & add JAVA_HOME

#/usr/lib/jvm/java-11-openjdk-amd64/

vi /etc/profile

/usr/lib/jvm/java-11-openjdk-amd64

export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

source /etc/profile

Install Tomcat ::

cd /opt
wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.95/bin/apache-tomcat-8.5.95.tar.gz

https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.95/bin/apache-tomcat-8.5.95.tar.gz

tar -xvzf /opt/apache-tomcat-8.5.95.tar.gz

apache-tomcat-8.5.95.tar.gz

mv apache-tomcat-8.5.95 tomcat

#Start Tomcat Server:
#Goto:

cd /opt/tomcat/bin
./startup.sh


###########################################

#Add User : 

#useradd -m -d /home/devopsadmin devopsadmin
#useradd devopsadmin

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 2048 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#make devopsadmin user as a owner to tomcat dir :

chown -R devopsadmin /opt/tomcat

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Deployment --> Copy the artifacts from source to target server 

	--> Jenkins_Slave 											--->					Tomcat_Server 
			target/mvn-hello-world.war							====>					/opt/tomcat/webapps/	
			
			
Install publish over ssh in Jenkins Master 		& restart jenkins 	
